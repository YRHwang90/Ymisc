end=15
)
View(results)
View(results)
set.seed(2023)
ID<-c(1,1,2,2,3,3,4,4,5,5)
State<-c("NY","NY","NC","NC","TX","TX","VA","VA","SC","SC")
Gender<-c("Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife")
stress<-rnorm(10,0,1)
satisfaction<-rnorm(10,0,1)
data<-data.frame(ID,State,Gender,state,satisfaction)
data<-data.frame(ID,State,Gender,State,satisfaction)
set.seed(2023)
ID<-c(1,1,2,2,3,3,4,4,5,5)
State<-c("NY","NY","NC","NC","TX","TX","VA","VA","SC","SC")
Gender<-c("Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife")
stress<-rnorm(10,0,1)
satisfaction<-rnorm(10,0,1)
data<-data.frame(ID,State,Gender,State,satisfaction)
set.seed(2023)
ID<-c(1,1,2,2,3,3,4,4,5,5)
State<-c("NY","NY","NC","NC","TX","TX","VA","VA","SC","SC")
Gender<-c("Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife")
stress<-rnorm(10,0,1)
satisfaction<-rnorm(10,0,1)
data<-data.frame(ID,State,Gender,stress,satisfaction)
View(data)
set.seed(2023)
ID<-c(1,1,2,2,3,3,4,4,5,5)
State<-c("NY","NY","NC","NC","TX","TX","VA","VA","SC","SC")
Gender<-c("Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife")
stress<-rnorm(10,0,1)
satisfaction<-rnorm(10,0,1)
data<-data.frame(ID,State,Gender,stress,satisfaction)
ID<-1:5
State<-c("NY","NC","TX","VA","SC"),
ID<-1:5
State<-c("NY","NC","TX","VA","SC")
Husband_stress<-rnorm(5,0,1)
Wife_stress<-rnorm(5,0,1)
Husband_satisfaction<-rnorm(5,0,1)
Wife_satisfaction<-rnorm(5,0,1)
results<-data.frame(ID,State,Husband_stress,Wife_stress,Husband_satisfaction,Wife_satisfaction)
View(results)
set.seed(2023)
ID<-c(1,1,2,2,3,3,4,4,5,5)
State<-c("NY","NY","NC","NC","TX","TX","VA","VA","SC","SC")
Gender<-c("Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife","Husband","Wife")
stress<-rnorm(10,0,1)
satisfaction<-rnorm(10,0,1)
data<-data.frame(ID,State,Gender,stress,satisfaction)
reshaped_data <- reshape(data,
idvar = c("ID", "State"),
timevar = "Gender",
direction = "wide")
View(reshaped_data)
reshaped_data <- reshape(data,
idvar = c("ID", "State"),
timevar = "Gender",
direction = "wide",
seperator="_")
?reshape()
reshaped_data <- reshape(data,
idvar = c("ID", "State"),
timevar = "Gender",
direction = "wide",
sep="_")
load("C:/Users/user/Desktop/Ymisc/data/sample_data.rda")
View(sample_data)
results<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15
)
wide2long<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
d<-reshape(data=data,
direction="long",
idvar=ID,
varying=start:end,sep=separator,
timevar="region")
data<-d[order(d[,ID]),]
return(data)
}
results<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15
)
separator="_"
ID="ID"
reshaped_data <- reshape(data,
idvar = ID,
timevar = "region",
direction = "wide",
sep=separator)
data<-sample_data
reshaped_data <- reshape(data,
idvar = ID,
timevar = "region",
direction = "wide",
sep=separator)
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
sep=separator)
View(reshaped_data)
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
varying=c(3:5)
sep=separator)
separator="_"
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
varying=c(3:5),
sep=separator)
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
varying=c(3:5),
sep=separator)
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
sep=separator)
}
reshaped_data <- reshape(results,
idvar = ID,
timevar = "region",
direction = "wide",
sep=separator)
View(reshaped_data)
start<-3
end<-5
left<-data[-c(start:end),]
data<-results
left<-data[-c(start:end),]
left<-data[,-c(start:end)]
reshaped_data <- reshape(results,
idvar = colnames(left),
timevar = "region",
direction = "wide",
sep=separator)
View(reshaped_data)
wide2long<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
if(hemisphere!="prefix"){
stop("hemisphere indicator should be prefix.")
}
d<-reshape(data=data,
direction="long",
idvar=ID,
varying=start:end,sep=separator,
timevar="region")
data<-d[order(d[,ID]),]
return(data)
}
results<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15
)
results<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="f"
)
?reshape()
long2wide<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
if(hemisphere!="prefix"){
stop("Hemisphere indicator should be the prefix.")
}else {
ID<-data[,-c(start:end)]
reshaped_data <- reshape(results,
idvar = colnames(ID),
timevar = "region",
direction = "wide",
sep=separator)
data<- reshaped_data[order(reshaped_data[,ID]),]
return(data)
}
}
long2wide<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end)
_)
match(data[[rh]])
match(data[["rh"]])
?match()
match(start,names(data))
match(rh,names(data))
match("rh",names(data))
wide2long<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
if(hemisphere!="prefix"){
stop("Hemisphere indicator should be the prefix.")
} else{
start<-match(start,names(data))
end<-match(end,names(data))
d<-reshape(data=data,
direction="long",
idvar=ID,
varying=start:end,
sep=separator,
timevar="region")
data<-d[order(d[,ID]),]
}
return(data)
}
#example
results<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="f"
)
View(data)
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="f"
)
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="prefix"
)
wide2long<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
if(hemisphere!="prefix"){
stop("Hemisphere indicator should be the prefix.")
} else{
start<-match(start,names(data))
end<-match(end,names(data))
d<-reshape(data=data,
direction="long",
idvar=ID,
varying=start:end,
sep=separator,
timevar="region")
data<-d[order(d[,ID]),]
}
return(data)
}
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="prefix"
)
wide2long<-function(data,
ID="ID",
separator="_",
hemisphere="prefix",
start,
end){
if(hemisphere!="prefix"){
stop("Hemisphere indicator should be the prefix.")
} else{
#
#     start<-match(start,names(data))
#     end<-match(end,names(data))
d<-reshape(data=data,
direction="long",
idvar=ID,
varying=start:end,
sep=separator,
timevar="region")
data<-d[order(d[,ID]),]
}
return(data)
}
#example
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
start=2,
end=15,
hemisphere="prefix"
)
View(long)
long<-long
long<-data.frame(long)
usethis::use_data(long,compress = "xy")
usethis::use_data(long,compress = "xz")
?reshape()
devtools::document()
rm(list = c("long2wide", "wide2long"))
devtools::document()
rm(list = c("long2wide", "wide2long"))`
rm(list = c("long2wide", "wide2long"))`
rm(list = c("long2wide", "wide2long"))
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::use_testthat()
devtools::use_testthat()
devtools::check()
devtools::document()
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
devtools::document()
devtools::check()
test_that("test the compute_total() function", {
# use built-in data set
data(sample_data)
# using the compute_total() function
results2 <-compute_total(data = sample_data,
left_hemisphere = "lh",
right_hemisphere = "rh",
separator="_",
ID="ID",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
# Check if the bilateral (L+R) measures were calculated correctly.
results2$total2Thalamus <- results$lh_Thalamus + results$rh_Thalamus
results2$total2Caudate <- results$lh_Caudate + results$rh_Caudate
expect_equal(results2$total_Thalamus, results2$total2Thalamus)
expect_equal(results2$total_Caudate, results2$total2Caudate)
})
data(sample_data)
# using the compute_total() function
results2 <-compute_total(data = sample_data,
left_hemisphere = "lh",
right_hemisphere = "rh",
separator="_",
ID="ID",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
load("C:/Users/user/Desktop/Ymisc/data/sample_data.rda")
View(sample_data)
results <-compute_AI(data = sample_data,
left_hemisphere = "lh",
right_hemisphere = "rh",
separator="_",
ID="ID",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
results2 <-compute_total(data = sample_data,
left_hemisphere = "lh",
right_hemisphere = "rh",
separator="_",
ID="ID",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
View(sample_data)
View(long)
wide<-long2wide(data=long,
ID="ID",
separator="_",
start="region",
end="rh")
names<-colnames(sample_data)
reorder_wide <- wide[,names]
expect_equal(sample_data, reorder_wide)
Author@R: as.person("Yoo Ri Hwang <yrhwang89@gmail.com> [aut, cre]")
Authors@R: as.person("Yoo Ri Hwang <yrhwang89@gmail.com> [aut, cre]")
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
?RSA()
library(RSA)
?RSA()
?mutate()
?Ymisc::compute_AI()
compute_total <- function(data=sample_data,
left_hemisphere="lh",
right_hemisphere="rh",
separator="_",
ID="ID",
hemisphere="prefix",
start,
end) {
start <- match(start,names(data))
end <- match(end,names(data))
NID <- match(ID,names(data))
data2 <- data[,c(start:end,NID)]
namelist <- colnames(data[,c(start:end)])
slist <- strsplit(namelist,split = separator)
llist <- list()
if(hemisphere=="prefix"){
for(i in 1:length(slist)){
llist[i] <- slist[[i]][2]
}
} else if(hemisphere=="suffix"){
for(i in 1:length(slist)){
llist[i] <- slist[[i]][1]
}
}
llist <- unique(llist)
for( i in 1:length(llist)){
data2[[paste0("total",separator,llist[[i]])]] <-
data2[[paste0(left_hemisphere,separator,llist[[i]])]] + data2[[paste0(right_hemisphere,separator,llist[[i]])]]
}
data4 <- data2[,grep("total", names(data2))]
data <- data.frame(cbind(data,data4))
return(data)
}
?mutate()
devtools::document()
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::check()
data(sample_data)
long<-wide2long(data=sample_data,
ID="ID",
separator="_",
hemisphere="prefix",
start="lh_Thalamus",
end="rh_AccumbensArea")
View(long)
devtolls::build()
?reshape()
devtools::check()
devtools::use_package("stats")
devtools::use_package("stats")
devtools::document()
devtools::check()
devtools::build()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
?use_package()
use_package("stats", type = "Imports")
devtools::use_package("stats", type ="Imports")
usethis::use_package("stats")
devtools::document()
usethis::use_package("stats")
devtools::document()
devtools::document()
devtools::check()
load("C:/Users/user/Documents/GitHub/discord/R/sysdata.rda")
View(sample_data)
load("C:/Users/user/Documents/GitHub/discord/R/sysdata.rda")
load("C:/Users/user/Desktop/Ymisc/data/sample_data.rda")
load("C:/Users/user/Desktop/Ymisc/data/long.rda")
